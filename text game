#include <iostream>
#include <iomanip>
#include <cmath>
#include <string>
#include <cstdlib>
#include <ctime>
#include <fstream>
#include <vector>
#include <map>

using namespace std;

class Card {
    //cards, actions (dmg and healing)
public:
    string name;
    int damage;
    int healing;

    Card(string n, int d, int h) : name(n), damage(d), healing(h) {}

    void play(class Player& player, class Enemy& enemy);
};

class Player {
    //holds stats for the players characters such as location and hp
public:
    int health;
    vector<Card> deck;
    string currentRoom;

    Player() {
        health = 100;
        currentRoom = "Entrance";
    }

    bool isAlive() {
        return health > 0;
    }

    void addCard(const Card& card) {
        deck.push_back(card);
    }

    void showDeck() {
        cout << "Your Cards:\n";
        for (size_t i = 0; i < deck.size(); ++i) {
            cout << i + 1 << ". " << deck[i].name << " (Damage: " << deck[i].damage << ", Heal: " << deck[i].healing << ")\n\n";
        }
    }
};

class Enemy {
    //enemy mosb stats
public:
    string name;
    int health;

    Enemy(string n, int h) : name(n), health(h) {}

    bool isAlive() {
        return health > 0;
    }
};
//plays the card, does the damage or healing
void Card::play(Player& player, Enemy& enemy) {
    cout << "Playing card: " << name << "\n";
    enemy.health -= damage;
    player.health = min(100, player.health + healing);
    if (damage > 0) cout << "Dealt " << damage << " hp of damage to " << enemy.name << ".\n";
    if (healing > 0) cout << "Healed " << healing << " hp of health.\n";
}

void battle(Player& player, Enemy& enemy) {
    //battle, runs the battle and gets user input for what card they play kind the logic?
    cout << "\nA wild " << enemy.name << " appears!\n";

    while (player.isAlive() && enemy.isAlive()) {
        cout << "\nPlayer HP: " << player.health << " | Enemy HP: " << enemy.health << endl;
        player.showDeck();

        int choice;
        cout << "Choose a card to play (1-" << player.deck.size() << "): ";
        cin >> choice;

        if (cin.fail() || choice < 1 || choice > static_cast<int>(player.deck.size())) {
            cin.clear();
            cin.ignore(1000, '\n');
            cout << "Invalid choice. You lost your turn. Maybe put in a valid input next time\n";
        }
        else {
            player.deck[choice - 1].play(player, enemy);
        }

        if (enemy.isAlive()) {
            int damage = rand() % 15 + 5;
            player.health -= damage;
            cout << enemy.name << " attacks for " << damage << " damage!\n";
        }
    }

    //runs when someone is registered as dead
    if (!enemy.isAlive()) cout << "You defeated " << enemy.name << "! yipeeeee \n";
    else cout << "You were defeated by " << enemy.name << " unyipee...\n";
}

void gameLoop() {
    //holds the cards
    //runs the programs text (tells the commands and the figh)
    srand(static_cast<unsigned int>(time(0)));
    Player player;
    player.addCard(Card("Slash", 10, 0));
    player.addCard(Card("Minor Heal", 0, 10));
    player.addCard(Card("idk man", 15, 0));

    // 1-3 waves
    string command;
    int wave = 1;
    const int finalWave = 3;

    cout << "C++ Final Project Text Adventure Game\n";
    cout << "Commands: status, deck, fight, help  quit\n";

    while (player.isAlive()) {
        cout << "\nYou are at the " << player.currentRoom << ".\n";
        cout << "Wave: " << wave << " / " << finalWave << "\n";
        cout << "What do you want to do? > ";
        cin >> command;

        if (command == "help") {
            cout << "\nCommands: \n fight - puts your in a fight\n status - shows hp\n deck - shows your deck\n quit - quits game and closes program\n";
        }
        else if (command == "status") {
            cout << "Health: " << player.health << "\n";
        }
        else if (command == "deck") {
            player.showDeck();
        }
        else if (command == "fight") {
            if (wave < finalWave) {
                Enemy enemy("Spork", 40 + wave * 10);  // progressively stronger
                battle(player, enemy);
                if (player.isAlive()) {
                    ++wave;
                }
            }
            else {
                Enemy boss("Toaster", 100);
                battle(player, boss);
                if (player.isAlive()) {
                    cout << "Congratulations! You defeated the final boss and won the game!!!!!feahuiefaa\n";
                }
                break;
            }
        }
        else if (command == "quit") {
            cout << "Exiting game...bye bye\n";
            break;
        }
        else {
            cout << "Unknown command. Try 'help'. stop trolling bro.\n";
        }

        if (!player.isAlive()) {
            //runs if player is not alive, sends death message
            cout << "You have died. Game Over. \n";
            break;
        }
    }
}

int main() {
    gameLoop();
    return 0;
}

