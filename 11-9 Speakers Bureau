#include <iostream>
#include <string>
#include <iomanip>
#include <algorithm>
#include <cctype>

using namespace std;

const int SIZE = 10;

struct Speaker {
    string name;
    string phone;
    string topic;
    double fee;
};

// Line 30: This code was generated by ChatGPT.

void addSpeaker(Speaker* speakers[]);
void editSpeaker(Speaker* speakers[]);
void displaySpeakers(Speaker* speakers[]);
void searchByTopic(Speaker* speakers[]);
bool containsIgnoreCase(const string&, const string&);
bool isValidDouble(const string&);

int main() {
    Speaker* speakers[SIZE] = {nullptr}; // Array of speaker pointers

    int choice;
    do {
        cout << "\nSpeakers' Bureau Menu:\n";
        cout << "1. Add Speaker\n";
        cout << "2. Edit Speaker\n";
        cout << "3. Display All Speakers\n";
        cout << "4. Search by Topic\n";
        cout << "5. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;
        cin.ignore();

        switch (choice) {
            case 1: addSpeaker(speakers); break;
            case 2: editSpeaker(speakers); break;
            case 3: displaySpeakers(speakers); break;
            case 4: searchByTopic(speakers); break;
            case 5:
                for (int i = 0; i < SIZE; ++i)
                    delete speakers[i];
                cout << "Goodbye!\n";
                break;
            default:
                cout << "Invalid choice. Try again.\n";
        }
    } while (choice != 5);

    return 0;
}

void addSpeaker(Speaker* speakers[]) {
    for (int i = 0; i < SIZE; ++i) {
        if (speakers[i] == nullptr) {
            speakers[i] = new Speaker();

            cout << "\nEnter details for speaker #" << i + 1 << ":\n";

            cout << "Name: ";
            getline(cin, speakers[i]->name);
            if (speakers[i]->name.empty()) {
                cout << "Name cannot be empty.\n";
                delete speakers[i];
                speakers[i] = nullptr;
                return;
            }

            cout << "Phone number: ";
            getline(cin, speakers[i]->phone);
            if (speakers[i]->phone.empty()) {
                cout << "Phone cannot be empty.\n";
                delete speakers[i];
                speakers[i] = nullptr;
                return;
            }

            cout << "Speaking topic: ";
            getline(cin, speakers[i]->topic);
            if (speakers[i]->topic.empty()) {
                cout << "Topic cannot be empty.\n";
                delete speakers[i];
                speakers[i] = nullptr;
                return;
            }

            cout << "Fee required: ";
            string feeStr;
            getline(cin, feeStr);
            if (!isValidDouble(feeStr)) {
                cout << "Invalid fee input.\n";
                delete speakers[i];
                speakers[i] = nullptr;
                return;
            }

            speakers[i]->fee = stod(feeStr);
            if (speakers[i]->fee < 0) {
                cout << "Fee cannot be negative.\n";
                delete speakers[i];
                speakers[i] = nullptr;
                return;
            }

            cout << "Speaker #" << i + 1 << " added.\n";
            return;
        }
    }
    cout << "All speaker slots are full.\n";
}

void editSpeaker(Speaker* speakers[]) {
    int index;
    cout << "Enter speaker number (1â€“10) to edit: ";
    cin >> index;
    cin.ignore();

    if (index < 1 || index > SIZE || speakers[index - 1] == nullptr) {
        cout << "Invalid or empty speaker slot.\n";
        return;
    }

    Speaker* sp = speakers[index - 1];

    cout << "Editing speaker #" << index << ":\n";

    cout << "New name: ";
    getline(cin, sp->name);
    if (sp->name.empty()) return;

    cout << "New phone: ";
    getline(cin, sp->phone);
    if (sp->phone.empty()) return;

    cout << "New topic: ";
    getline(cin, sp->topic);
    if (sp->topic.empty()) return;

    cout << "New fee: ";
    string feeStr;
    getline(cin, feeStr);
    if (!isValidDouble(feeStr)) return;

    sp->fee = stod(feeStr);
    if (sp->fee < 0) return;

    cout << "Speaker updated.\n";
}

void displaySpeakers(Speaker* speakers[]) {
    cout << "\nAll Speakers:\n";
    for (int i = 0; i < SIZE; ++i) {
        if (speakers[i] != nullptr) {
            cout << "\nSpeaker #" << i + 1 << ":\n";
            cout << "Name: " << speakers[i]->name << "\n";
            cout << "Phone: " << speakers[i]->phone << "\n";
            cout << "Topic: " << speakers[i]->topic << "\n";
            cout << "Fee: $" << fixed << setprecision(2) << speakers[i]->fee << "\n";
        }
    }
}

void searchByTopic(Speaker* speakers[]) {
    string keyword;
    cout << "Enter keyword to search by topic: ";
    getline(cin, keyword);

    bool found = false;
    for (int i = 0; i < SIZE; ++i) {
        if (speakers[i] != nullptr && containsIgnoreCase(speakers[i]->topic, keyword)) {
            if (!found) {
                cout << "\nMatching Speakers:\n";
                found = true;
            }
            cout << "\nSpeaker #" << i + 1 << ":\n";
            cout << "Name: " << speakers[i]->name << "\n";
            cout << "Phone: " << speakers[i]->phone << "\n";
            cout << "Topic: " << speakers[i]->topic << "\n";
            cout << "Fee: $" << fixed << setprecision(2) << speakers[i]->fee << "\n";
        }
    }

    if (!found) {
        cout << "No matching speakers found.\n";
    }
}

bool containsIgnoreCase(const string& str, const string& keyword) {
    string strLower = str;
    string keywordLower = keyword;
    transform(strLower.begin(), strLower.end(), strLower.begin(), ::tolower);
    transform(keywordLower.begin(), keywordLower.end(), keywordLower.begin(), ::tolower);
    return strLower.find(keywordLower) != string::npos;
}

bool isValidDouble(const string& str) {
    try {
        stod(str);
        return true;
    } catch (...) {
        return false;
    }
}
